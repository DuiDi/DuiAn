/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package duian;

import java.awt.Color;
import java.util.TimerTask;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import java.util.Timer;
import java.io.*;

/**
 *
 * @author DydyBook
 */
public final class AppliDuiAn extends javax.swing.JFrame {
    
    
    //Variables globales
    int i = 0           ; //Indice global des tableaux du quiz
    String[] queries    ; //Tableau global des questions
    String[] answers    ; //Tablea global des réponses
    String[][] choices  ; //Tableau global des choix multiples
    String[] help       ; //Tableau global des messages d'aide pour les questions
    String path = "/Users/DydyBook/NetBeansProjects/DuiAn/DuiAn/src/duian/Regions/";//Chemin absolu d'accès aux fichiers, à modifier selon le chemin de l'utilisateur
    String[] regions = new String[4]; //Tableau global des régions
    JButton boutonTemp = new JButton(); //JButton récupérant les informations sur le bouton sur lequel le joueur à cliquer
    int passable = 3;               //Paramètre de fautes maximales pour chaque question
    Boolean DemarrerJeu;            //Précise si on est au début de la catégorie
    Boolean BoutonValiderCliqué;    //Précise si le bouton "Valider" a été cliqué 
    Boolean BoutonQuestionSuivanteCliqué; //Précise si le bouton "Question suivante" a été cliqué 
    String cheminDossierPseudo = "/Users/DydyBook/NetBeansProjects/DuiAn/DuiAn/src/duian/comptes/";//Chemin dossier comptes
    Boolean jeuChargé = false; //Permet de savoir si le jeu a été chargé

    
    //Création objets
    Carte map = new Carte();
    Joueur gamer = new Joueur();
    Region regionNord = new Region();
    Region regionSud = new Region();
    Region regionOuest = new Region();
    Region regionEst = new Region();
    Region regionTemp = new Region();
    Categorie cat = new Categorie();
    QCM quiz = new QCM();
    
    /**
     * Creates new form AppliDuiAn
     */
    public AppliDuiAn() {
        initComponents();
        
        LabelNomRegion.setText("Bienvenue dans le jeu Dui'An!");//Titre de menu
        
        SetInvisibleHorsQuiz();//Eléments à rendre invisible hors quiz
        
        regions = map.GetRegions();//Récupération des régions
        
        //Assignation valeurs aux régions
        regionNord.SetNom(regions[0]);
        regionSud.SetNom(regions[1]);
        regionEst.SetNom(regions[2]);
        regionOuest.SetNom(regions[3]);
        
        //Assignation des catégories par région
        regionNord.AjoutCategories(map.GetRegionSpec(regions[0]));
        regionSud.AjoutCategories(map.GetRegionSpec(regions[1]));
        regionEst.AjoutCategories(map.GetRegionSpec(regions[2]));
        regionOuest.AjoutCategories(map.GetRegionSpec(regions[3]));
        
        //Assignation des totems à chaque catégorie
        regionNord.SetTotemsParCategorie("Tortue");
        regionSud.SetTotemsParCategorie("Phénix");
        regionEst.SetTotemsParCategorie("Dragon");
        regionOuest.SetTotemsParCategorie("Tigre");
        
        SetBoutonsRegionsInvisibles();
        BoutonRetourMenu.setVisible(false);
        BoutonRetourCategorie.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel7 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        LabelNomCategorie = new javax.swing.JLabel();
        ListeChoix = new javax.swing.JList<>();
        BoutonSauvegarder = new javax.swing.JButton();
        LabelResultatReponse = new javax.swing.JLabel();
        LabelReponse = new javax.swing.JLabel();
        LabelNumQuestion = new javax.swing.JLabel();
        LabelQuestion = new javax.swing.JLabel();
        BoutonValiderQuestion = new javax.swing.JButton();
        BoutonIndice = new javax.swing.JButton();
        LabelAidePanda = new javax.swing.JLabel();
        LabelNomRegion = new javax.swing.JLabel();
        BoutonNord = new javax.swing.JButton();
        BoutonOuest = new javax.swing.JButton();
        BoutonSud = new javax.swing.JButton();
        BoutonEst = new javax.swing.JButton();
        BoutonValiderCategorie = new javax.swing.JButton();
        BoutonRevenirRegion = new javax.swing.JButton();
        BoutonQuitter = new javax.swing.JButton();
        LabelListeCategories = new javax.swing.JLabel();
        BoutonNouveauJeu = new javax.swing.JButton();
        BoutonChargerPartie = new javax.swing.JButton();
        ScrollCategorie = new javax.swing.JScrollPane();
        ListeCategories = new javax.swing.JList<>();
        ScrollEtatJoueur = new javax.swing.JScrollPane();
        ListeEtatJoueur = new javax.swing.JList<>();
        LabelEtatJoueur = new javax.swing.JLabel();
        BoutonRetourMenu = new javax.swing.JButton();
        BoutonRetourCategorie = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 102));
        setPreferredSize(new java.awt.Dimension(1000, 462));

        jPanel7.setBackground(new java.awt.Color(255, 232, 37));
        jPanel7.setForeground(new java.awt.Color(255, 255, 255));
        jPanel7.setAutoscrolls(true);
        jPanel7.setPreferredSize(new java.awt.Dimension(1200, 462));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 153));
        jTabbedPane1.setAutoscrolls(true);

        jPanel1.setBackground(new java.awt.Color(249, 123, 12));
        jPanel1.setAutoscrolls(true);

        LabelNomCategorie.setBackground(new java.awt.Color(255, 232, 37));
        LabelNomCategorie.setFont(new java.awt.Font("New Peninim MT", 1, 16)); // NOI18N
        LabelNomCategorie.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNomCategorie.setText("Catégorie");
        LabelNomCategorie.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        LabelNomCategorie.setOpaque(true);

        ListeChoix.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ListeChoix.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        ListeChoix.setForeground(new java.awt.Color(249, 90, 23));
        ListeChoix.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);

        BoutonSauvegarder.setText("Sauvegarder");
        BoutonSauvegarder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonSauvegarderActionPerformed(evt);
            }
        });

        LabelResultatReponse.setBackground(new java.awt.Color(255, 255, 255));
        LabelResultatReponse.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        LabelResultatReponse.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelResultatReponse.setOpaque(true);

        LabelReponse.setBackground(new java.awt.Color(255, 232, 37));
        LabelReponse.setFont(new java.awt.Font("Lucida Grande", 3, 13)); // NOI18N
        LabelReponse.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelReponse.setText("Réponse");
        LabelReponse.setOpaque(true);

        LabelNumQuestion.setFont(new java.awt.Font("Myanmar MN", 0, 14)); // NOI18N
        LabelNumQuestion.setForeground(new java.awt.Color(255, 255, 255));
        LabelNumQuestion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        LabelQuestion.setBackground(new java.awt.Color(255, 226, 177));
        LabelQuestion.setFont(new java.awt.Font("Iowan Old Style", 0, 18)); // NOI18N
        LabelQuestion.setForeground(new java.awt.Color(255, 255, 255));
        LabelQuestion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelQuestion.setAutoscrolls(true);

        BoutonValiderQuestion.setBackground(new java.awt.Color(106, 147, 160));
        BoutonValiderQuestion.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        BoutonValiderQuestion.setForeground(new java.awt.Color(255, 255, 255));
        BoutonValiderQuestion.setText("Valider");
        BoutonValiderQuestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonValiderQuestionActionPerformed(evt);
            }
        });

        BoutonIndice.setBackground(new java.awt.Color(255, 255, 255));
        BoutonIndice.setText("Un indice ?");
        BoutonIndice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonIndiceActionPerformed(evt);
            }
        });

        LabelAidePanda.setBackground(new java.awt.Color(255, 204, 204));
        LabelAidePanda.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        LabelAidePanda.setAutoscrolls(true);
        LabelAidePanda.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        LabelAidePanda.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(LabelQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ListeChoix, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BoutonSauvegarder)
                    .addComponent(BoutonValiderQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BoutonIndice, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(LabelResultatReponse, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(LabelAidePanda, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(LabelReponse, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(80, 80, 80))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(LabelNomCategorie, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(LabelNumQuestion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(90, 90, 90))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelNomCategorie, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelNumQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(BoutonSauvegarder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(BoutonIndice, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(LabelResultatReponse, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 32, Short.MAX_VALUE))
                            .addComponent(LabelAidePanda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(LabelQuestion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(BoutonValiderQuestion))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addComponent(ListeChoix, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE))
                        .addComponent(LabelReponse, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Quiz", jPanel1);

        LabelNomRegion.setBackground(new java.awt.Color(249, 44, 142));
        LabelNomRegion.setFont(new java.awt.Font("Palatino", 1, 24)); // NOI18N
        LabelNomRegion.setForeground(new java.awt.Color(255, 255, 255));
        LabelNomRegion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNomRegion.setOpaque(true);

        BoutonNord.setActionCommand("Langue");
        BoutonNord.setLabel("Langue");
        BoutonNord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonNordActionPerformed(evt);
            }
        });

        BoutonOuest.setLabel("Culture pop moderne");
        BoutonOuest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonOuestActionPerformed(evt);
            }
        });

        BoutonSud.setText("Histoire et Geographie");
        BoutonSud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonSudActionPerformed(evt);
            }
        });

        BoutonEst.setText("Us et Coutumes");
        BoutonEst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonEstActionPerformed(evt);
            }
        });

        BoutonValiderCategorie.setText("Sélectionner");
        BoutonValiderCategorie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonValiderCategorieActionPerformed(evt);
            }
        });

        BoutonRevenirRegion.setText("Revenir au menu des régions");
        BoutonRevenirRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonRevenirRegionActionPerformed(evt);
            }
        });

        BoutonQuitter.setText("Quitter");
        BoutonQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonQuitterActionPerformed(evt);
            }
        });

        LabelListeCategories.setBackground(new java.awt.Color(153, 153, 255));
        LabelListeCategories.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        LabelListeCategories.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelListeCategories.setText("Catégories dédiées");

        BoutonNouveauJeu.setText("Nouveau jeu");
        BoutonNouveauJeu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonNouveauJeuActionPerformed(evt);
            }
        });

        BoutonChargerPartie.setText("Charger une partie");
        BoutonChargerPartie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonChargerPartieActionPerformed(evt);
            }
        });

        ListeCategories.setBackground(new java.awt.Color(255, 204, 204));
        ListeCategories.setFont(new java.awt.Font("Kohinoor Telugu", 0, 14)); // NOI18N
        ScrollCategorie.setViewportView(ListeCategories);

        ListeEtatJoueur.setBackground(new java.awt.Color(249, 123, 12));
        ListeEtatJoueur.setFont(new java.awt.Font("Malayalam MN", 0, 15)); // NOI18N
        ListeEtatJoueur.setForeground(new java.awt.Color(0, 51, 51));
        ScrollEtatJoueur.setViewportView(ListeEtatJoueur);

        LabelEtatJoueur.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        LabelEtatJoueur.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelEtatJoueur.setText("Joueur");

        BoutonRetourMenu.setText("Revenir menu");
        BoutonRetourMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonRetourMenuActionPerformed(evt);
            }
        });

        BoutonRetourCategorie.setText("Revenir aux catégories");
        BoutonRetourCategorie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonRetourCategorieActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(BoutonNouveauJeu)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BoutonChargerPartie)
                                .addGap(135, 135, 135))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(BoutonRevenirRegion)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BoutonRetourCategorie)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 81, Short.MAX_VALUE)))
                        .addComponent(LabelNomRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                        .addComponent(BoutonQuitter))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(BoutonRetourMenu))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(162, 162, 162)
                                .addComponent(BoutonNord)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BoutonSud)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BoutonEst)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BoutonOuest))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(LabelListeCategories, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(LabelEtatJoueur, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(ScrollEtatJoueur, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                                                    .addComponent(ScrollCategorie, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(BoutonValiderCategorie)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelNomRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BoutonQuitter)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BoutonRevenirRegion)
                            .addComponent(BoutonRetourCategorie))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BoutonNouveauJeu)
                            .addComponent(BoutonChargerPartie))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BoutonNord)
                    .addComponent(BoutonSud)
                    .addComponent(BoutonEst)
                    .addComponent(BoutonOuest)
                    .addComponent(BoutonRetourMenu))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(LabelListeCategories)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ScrollCategorie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BoutonValiderCategorie))
                        .addGap(15, 15, 15)
                        .addComponent(LabelEtatJoueur)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ScrollEtatJoueur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, 1200, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 462, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Permet de revenir au menu des régions
    private void BoutonRevenirRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonRevenirRegionActionPerformed
        SetInvisibleHorsQuiz();//Eléménts rendus invisibles
        SetBoutonsRegionsVisibles();
        
        //Elément rendu visible
        BoutonRetourMenu.setVisible(true);
        
        SetBoutonsMenuInvisible();
        SetBoutonsCategorieVisible();
        
        LabelNomRegion.setText("Joueur : "+gamer.GetNom());//Affichage nom du joueur
        
        //On vide les champs du quiz
        String[] vide = new String[4];
        ListeChoix.setListData(vide);
        LabelNomCategorie.setText("Catégorie");
        LabelAidePanda.setText("");
        LabelQuestion.setText("");
        
    }//GEN-LAST:event_BoutonRevenirRegionActionPerformed

    //Permet de rentrer dans les catégories de la région Us & Coutumes
    private void BoutonEstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonEstActionPerformed
        
        SetBoutonsCategorieVisible();//Affichage catégorie

        SetVisibleQuiz();//Affichage des éléments nécessaires au quiz

        SetBoutonsRegionsInvisibles();

        //Récupération informations par région
        LabelNomRegion.setText(BoutonEst.getText());
        ListeCategories.setListData(map.GetRegionSpec(BoutonEst.getText()));
        LabelListeCategories.setText("Trésors : Dragons");
        ListeCategories.setVisible(true);
        
        //On récupère le bouton cliqué
        boutonTemp = BoutonEst;
        
    }//GEN-LAST:event_BoutonEstActionPerformed

    //Permet de rentrer dans les catégories de la région Histoire & Géographie
    private void BoutonSudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonSudActionPerformed
        
        SetBoutonsCategorieVisible();//Affichage catégorie

        SetVisibleQuiz();//Affichage des éléments nécessaires au quiz
        
        SetBoutonsRegionsInvisibles();

        //Récupération informations par région
        LabelNomRegion.setText(regionSud.GetNom());
        ListeCategories.setListData(map.GetRegionSpec(BoutonSud.getText()));
        LabelListeCategories.setText("Trésors : Phénix");
        ListeCategories.setVisible(true);
       
        //On récupère le bouton cliqué
        boutonTemp = BoutonSud;
        
    }//GEN-LAST:event_BoutonSudActionPerformed

    //Permet de rentrer dans les catégories de la région Culture pop moderne
    private void BoutonOuestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonOuestActionPerformed
        
        SetBoutonsCategorieVisible();//Affichage catégorie

        SetVisibleQuiz();//Affichage des éléments nécessaires au quiz

        SetBoutonsRegionsInvisibles();

        //Récupération informations par région
        LabelNomRegion.setText(BoutonOuest.getText());
        ListeCategories.setListData(map.GetRegionSpec(BoutonOuest.getText()));
        LabelListeCategories.setText("Trésors : Tigres");
        ListeCategories.setVisible(true);
        
        //On récupère le bouton cliqué
        boutonTemp = BoutonOuest;
        
    }//GEN-LAST:event_BoutonOuestActionPerformed

    //Permet de rentrer dans les catégories de la région Langue
    private void BoutonNordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonNordActionPerformed
        
        //ResetQuiz();
        SetBoutonsCategorieVisible();//Affichage catégorie
        SetVisibleQuiz();//Affichage des éléments nécessaires au quiz
       
        SetBoutonsRegionsInvisibles(); 

        //Récupération informations par région
        LabelNomRegion.setText(BoutonNord.getText());
        ListeCategories.setListData(map.GetRegionSpec(BoutonNord.getText()));
        LabelListeCategories.setText("Trésors : Tortues");
        
        //On récupère le bouton cliqué
        boutonTemp = BoutonNord;
     
    }//GEN-LAST:event_BoutonNordActionPerformed

    //Permet d'afficher une case contenant un indice pour la question du quiz
    private void BoutonIndiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonIndiceActionPerformed
        
        //Eléments rendus visibles
        LabelAidePanda.setVisible(!LabelAidePanda.isVisible());
    }//GEN-LAST:event_BoutonIndiceActionPerformed

    //Permet de valider la catégorie une fois dans une région
    private void BoutonValiderCategorieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonValiderCategorieActionPerformed
        
        ResetQuiz();//Remise à zéro
        BoutonRetourMenu.setVisible(false);//Retrait
        AffichageSelonRegion();//Affichage des messages selon la région
        AfficheEtatJeu(); //Affichage informations joueur
        
        BoutonSauvegarder.setVisible(false);//Bouton rendu invisible
       
        GetQuiz();//Obtenir le quizz
        
        //Eléments rendus invisibles
        BoutonValiderCategorie.setVisible(false);
        LabelResultatReponse.setVisible(false);
        LabelReponse.setVisible(false);
        
        //Eléments rendus visibles
        SetVisibleQuiz();
        BoutonRetourCategorie.setVisible(true);
        
    }//GEN-LAST:event_BoutonValiderCategorieActionPerformed

    //Permet de quitter l'application
    private void BoutonQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonQuitterActionPerformed
        System.exit(0);
    }//GEN-LAST:event_BoutonQuitterActionPerformed

    private void BoutonValiderQuestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonValiderQuestionActionPerformed
        AfficheResultat();//Affiche le résultat
    }//GEN-LAST:event_BoutonValiderQuestionActionPerformed

    private void BoutonNouveauJeuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonNouveauJeuActionPerformed
        
        //Si la partie n'a pas été chargé
        if (!jeuChargé){
            CreerJoueur();//Création joueur
            BoutonRetourMenu.setVisible(true);//Affichage menu
        }
        else{
            SetBoutonsRegionsVisibles();
            SetBoutonsMenuInvisible();
            AfficheEtatJeu();//Affichage informations joueur
        }     
    }//GEN-LAST:event_BoutonNouveauJeuActionPerformed

    private void BoutonSauvegarderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonSauvegarderActionPerformed
        
      //Création fichier
        File fichier = new File(cheminDossierPseudo+gamer.GetNom()+".ser");
       
        //Si le fichier n'existe pas
        if(!fichier.exists()){
            Sauvegarde(gamer.GetNom(), gamer);
        }
        else{           
            //On demande au joueur s'il souhaite conserver ou non l'ancienne sauvegarde
            int res = JOptionPane.showConfirmDialog(this,"OK pour écraser le fichier!\n");
   
            if(res == JOptionPane.YES_OPTION){
                Sauvegarde(gamer.GetNom(), gamer);
            }
            else{
                JOptionPane.showMessageDialog(this, "Joueur " + gamer.GetNom() + ", aucune partie n'a été sauvegardée!", "Ancienne sauvegarde conservée!", 1);
            }
        }
        
    }//GEN-LAST:event_BoutonSauvegarderActionPerformed

    private void BoutonChargerPartieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonChargerPartieActionPerformed
        //Variable locale
        String nom = JOptionPane.showInputDialog("Votre pseudo : ");
        
        //Création fichier
        File fichier = new File(cheminDossierPseudo+nom+".ser");
        
        //Création objet Joueur
        Joueur j = new Joueur();
        
        //Si le fichier existe
        if(fichier.exists()){
           gamer = Chargement(nom);//Renvoie par la fonction d'un objet Joueur existant
      
        }
        else{
            JOptionPane.showMessageDialog(this,"Aucune partie pour ce pseudo", "Désolé, pseudo introuvable", 0);
        }
    }//GEN-LAST:event_BoutonChargerPartieActionPerformed

    private void BoutonRetourMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonRetourMenuActionPerformed
        BoutonRetourMenu.setVisible(false);//Retrait bouton
        SetBoutonsMenuVisible();
        AfficheEtatJeu();//Affiche informations joueur
        jeuChargé = false;//Bouton Nouveau Jeu reprend son nom
    }//GEN-LAST:event_BoutonRetourMenuActionPerformed

    private void BoutonRetourCategorieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonRetourCategorieActionPerformed
        int rep = JOptionPane.showConfirmDialog(this, "Le quiz sera interrompu et les données perdues...", "Attention!", 2);
        
        if(rep == JOptionPane.OK_OPTION){
            JOptionPane.showMessageDialog(this, "Vous allez quitter la catégorie "+cat.GetNom(), "Retour aux catégories de "+regionTemp.GetNom(), 1);
            SetBoutonsCategorieVisible();
            ResetQuiz();
        }
        
    }//GEN-LAST:event_BoutonRetourCategorieActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppliDuiAn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppliDuiAn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppliDuiAn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppliDuiAn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new AppliDuiAn().setVisible(true);
            }
        });
    }
    
    //Permet de créer des boutons de choix
    public void CreerItemChoix(){
        
        //On applique le multiligne à chaque string du tableau
        for(String s: choices[i]){
            s = convertToMultiline(s);
        }
        ListeChoix.setListData(choices[i]);//On ajoute le tableau de string
    }
    
    //Permet de récupérer le quiz correspondant à la catégorie
    public void GetQuiz(){
        
        SetBoutonsCategorieInvisible();//Retrait affichage
        
        BoutonValiderQuestion.setText("Valider");//On demande de cliquer sur la question suivante
        
        //Eléments rendus ponctuellement invisibles
        LabelReponse.setVisible(false);
        LabelResultatReponse.setVisible(false);
            
        //Tant qu'il y a encore des questions
        if(i < 5){
            //On récupère la catégorie sélectionnée selon la région
           if(boutonTemp.getText().compareTo(regionNord.GetNom()) == 0){
                for(Categorie c: regionNord.categories){
                    //Si la catégorie sélectionnée correspond au nom d'une catégorie de la région
                    if(ListeCategories.getSelectedValue().compareTo(c.GetNom()) == 0){
                        cat = c;
                        regionTemp = regionNord;
                    }
                }
            }
            else if(boutonTemp.getText().compareTo(regionSud.GetNom()) == 0){
                for(Categorie c: regionSud.categories){
                    //Si la catégorie sélectionnée correspond au nom d'une catégorie de la région
                    if(ListeCategories.getSelectedValue().compareTo(c.GetNom()) == 0){
                        cat = c;
                        regionTemp = regionSud;
                    }
                }
            }
            else if(boutonTemp.getText().compareTo(regionOuest.GetNom()) == 0){
                for(Categorie c: regionOuest.categories){
                    //Si la catégorie sélectionnée correspond au nom d'une catégorie de la région
                    if(ListeCategories.getSelectedValue().compareTo(c.GetNom()) == 0){
                        cat = c;
                        regionTemp = regionOuest;
                    }
                }
            }
            else if(boutonTemp.getText().compareTo(regionEst.GetNom()) == 0){
                for(Categorie c: regionEst.categories){
                    //Si la catégorie sélectionnée correspond au nom d'une catégorie de la région
                    if(ListeCategories.getSelectedValue().compareTo(c.GetNom()) == 0){
                        cat = c;
                        regionTemp = regionEst;
                    }
                }
            }
            cat.SetNom(ListeCategories.getSelectedValue());
            cat.SetPath(path+boutonTemp.getText()+"/"+cat.GetNom());
            quiz.SetQCM(cat.GetPath());

            //Récupération des éléments du quiz
            queries = quiz.GetQuestions();
            answers = quiz.GetReponses();
            choices = quiz.GetChoix();
            help = quiz.GetAides();

            //Affichage des informations
            LabelNumQuestion.setText("Question "+(i+1));
            LabelNomCategorie.setText(cat.GetNom());
            LabelQuestion.setText(convertToMultiline(queries[i]));
            LabelReponse.setText(answers[i]);
            LabelAidePanda.setText(convertToMultiline(help[i]));
            CreerItemChoix();
            
            //Eléments rendus invisibles
            LabelAidePanda.setVisible(false);
        }
        //S'il n'y a plus de questions dans la catégorie
        else{
            AfficheEtatJeu(); //Affiche les informations actualisées sur le joueur
            BoutonSauvegarder.setVisible(true); //On ne sauvegarde la partie que si on a réussi à valider la catégorie

            
            //Si le nombre d'erreurs est passable voire bas
            if (quiz.GetBonnesReponses() >= passable){
                if(gamer.HasTotem(cat.GetAnimal())){
                    JOptionPane.showMessageDialog(this,"Vous avez déjà obtenu le \n" +cat.GetAnimal().toString()+ " !", "Oups... C'est gênant...", 0);

                }
                else{
                    JOptionPane.showMessageDialog(this,"Vous avez eu " +quiz.GetBonnesReponses()+ " bonne(s) réponse(s)", "Quiz terminé", 1);
                    JOptionPane.showMessageDialog(this,"Vous avez obtenu le \n" +cat.GetAnimal().toString()+ " !", "Super !", 1);
                    LabelNomCategorie.setText("Bravo !" +cat.GetAnimal().toString()+" obtenu");  
                    
                    //Mise à jour
                    cat.SetValide(true);
                    gamer.SetTotemsValidés(gamer.GetTotemsValidés()+1);
                    gamer.AjoutTotem(cat.GetAnimal());
                
                    //On récupère la catégorie sélectionnée selon la région
                    if(boutonTemp.getText().compareTo(regionNord.GetNom()) == 0){
                        for(Categorie c: regionNord.categories){
                            //Si la catégorie sélectionnée correspond au nom d'une catégorie de la région
                            if(cat.GetNom().compareTo(c.GetNom()) == 0){
                                c = cat;
                            }
                        }
                    }
                    else if(boutonTemp.getText().compareTo(regionSud.GetNom()) == 0){
                        for(Categorie c: regionSud.categories){
                            //Si la catégorie sélectionnée correspond au nom d'une catégorie de la région
                            if(cat.GetNom().compareTo(c.GetNom()) == 0){
                                c = cat;
                            }
                        }
                    }
                    else if(boutonTemp.getText().compareTo(regionOuest.GetNom()) == 0){
                        for(Categorie c: regionOuest.categories){
                            //Si la catégorie sélectionnée correspond au nom d'une catégorie de la région
                            if(cat.GetNom().compareTo(c.GetNom()) == 0){
                                c = cat;
                            }
                        }
                    }
                    else if(boutonTemp.getText().compareTo(regionEst.GetNom()) == 0){
                        for(Categorie c: regionEst.categories){
                            //Si la catégorie sélectionnée correspond au nom d'une catégorie de la région
                            if(cat.GetNom().compareTo(c.GetNom()) == 0){
                                c = cat;
                            }
                        }
                    }
                }
                
                SetBoutonsCategorieVisible();//Affichage
                BoutonRetourCategorie.setVisible(false);//Retrait
                
            }
            else{//Sinon le joueur a perdu
                JOptionPane.showMessageDialog(this,"Désolé ! Vous n'avez eu que " +quiz.GetBonnesReponses()+ " bonne(s) réponse(s)", "Oups...", 0); //Affichage nombre d'erreurs       
            }
            AfficheEtatJeu();
            
        }
    }
    
    //Permet de rendre invisible certains éléments au menu
    public void SetInvisibleHorsQuiz(){
        LabelAidePanda.setVisible(false);
        BoutonIndice.setVisible(false);
        jTabbedPane1.setVisible(false);
        LabelReponse.setVisible(false);
        BoutonRevenirRegion.setVisible(false);
        LabelQuestion.setVisible(false);
        LabelResultatReponse.setVisible(false);
        LabelListeCategories.setVisible(false);
        BoutonValiderCategorie.setVisible(false);
        ScrollCategorie.setVisible(false);
        ListeEtatJoueur.setVisible(false);
        LabelEtatJoueur.setVisible(false);
        ScrollEtatJoueur.setVisible(false);
        BoutonSauvegarder.setVisible(false);
        BoutonRetourCategorie.setVisible(false);
        LabelNumQuestion.setVisible(false);
    }
    
    //Permet de rendre visible certains éléments au quiz
    public void SetVisibleQuiz(){
        BoutonIndice.setVisible(true);
        jTabbedPane1.setVisible(true);
        LabelNomCategorie.setVisible(true);
        BoutonRevenirRegion.setVisible(true);
        LabelQuestion.setVisible(true);
        BoutonRetourCategorie.setVisible(true);
        LabelNumQuestion.setVisible(true);
        BoutonValiderQuestion.setVisible(true);
        BoutonIndice.setVisible(true);
        BoutonValiderCategorie.setVisible(true);
        ScrollCategorie.setVisible(true);
        ListeCategories.setVisible(true);
        LabelListeCategories.setVisible(true);
    }
    
    //Permet de rendre invisible les boutons des régions
    public void SetBoutonsRegionsInvisibles(){
        BoutonNord.setVisible(false);
        BoutonSud.setVisible(false);
        BoutonOuest.setVisible(false);
        BoutonEst.setVisible(false);
        BoutonRetourCategorie.setVisible(false);
    }
    
    //Permet de rendre visible les boutons des régions
    public void SetBoutonsRegionsVisibles(){
        BoutonNord.setVisible(true);
        BoutonSud.setVisible(true);
        BoutonOuest.setVisible(true);
        BoutonEst.setVisible(true);
        
        LabelNomRegion.setText("Les régions de Chine");//Titre des régions
    }
    
    //Permet d'afficher le résultat
    public void AfficheResultat(){
        //Variables locales
        String repJoueur = ListeChoix.getSelectedValue();
        Timer timer = new Timer();
        
        //Création d'une tâche pour le timer
        TimerTask tache = new TimerTask() {
            @Override
            public void run() {
                //Eléments rendus ponctuellement invisibles
                LabelReponse.setVisible(false);
                LabelResultatReponse.setVisible(false);
                i++;
                GetQuiz();
            }
        };
        
        
        //Si l'indice est inférieur au nombre d'éléments dans les tableaux de quiz
        if (i < 5){
           
            BoutonValiderCliqué = true;//On précise le bouton valider a été cliqué

            //Vérification du résultat
            if (repJoueur.compareTo(LabelReponse.getText()) == 0)
            {
                LabelResultatReponse.setForeground(Color.BLUE);
                LabelResultatReponse.setText("Correct !");
                quiz.SetBonnesreponses();
            }
            else
            {
                LabelResultatReponse.setForeground(Color.red);
                LabelResultatReponse.setText("Faux !");
            }
            //Affichage de la réponse
            LabelReponse.setText(convertToMultiline(LabelReponse.getText()));
            LabelReponse.setVisible(true);
            LabelResultatReponse.setVisible(true);

            timer.schedule(tache, 2*1000);//Enclenchement du rendu invisible de certains éléments
       
        }
        else{
            BoutonValiderQuestion.setText("Fin de quiz");
            GetQuiz();
        }
    }
    
    //Permet d'afficher des informations selon la région
    public void AffichageSelonRegion(){
        if(boutonTemp.getText().compareTo(regionNord.GetNom()) == 0){
            for(Categorie c: this.regionNord.categories){
                if(c.GetNom().compareTo(ListeCategories.getSelectedValue()) == 0){
                    if(gamer.HasTotem(cat.GetAnimal())){
                       JOptionPane.showMessageDialog(this, "Vous avez déjà le Trésor :\n"+c.GetAnimal().toString()+"!", "Catégorie : "+c.GetNom(), 1);

                    }
                    else{
                        JOptionPane.showMessageDialog(this, "Vous devez obtenir le Trésor :\n"+c.GetAnimal().toString(), "Catégorie : "+c.GetNom(), 1);
                    }
                     
                } 
            }
        }
        if(boutonTemp.getText().compareTo(regionSud.GetNom()) == 0){
            for(Categorie c: this.regionSud.categories){
                if(c.GetNom().compareTo(ListeCategories.getSelectedValue()) == 0){
                   if(gamer.HasTotem(cat.GetAnimal())){
                       JOptionPane.showMessageDialog(this, "Vous avez déjà le Trésor :\n"+c.GetAnimal().toString()+"!", "Catégorie : "+c.GetNom(), 1);

                    }
                    else{
                        JOptionPane.showMessageDialog(this, "Vous devez obtenir le Trésor :\n"+c.GetAnimal().toString(), "Catégorie : "+c.GetNom(), 1);
                    }
                } 
            }
        }
        if(boutonTemp.getText().compareTo(regionOuest.GetNom()) == 0){
            for(Categorie c: this.regionOuest.categories){
                if(c.GetNom().compareTo(ListeCategories.getSelectedValue()) == 0){
                  if(gamer.HasTotem(cat.GetAnimal())){
                       JOptionPane.showMessageDialog(this, "Vous avez déjà le Trésor :\n"+c.GetAnimal().toString()+"!", "Catégorie : "+c.GetNom(), 1);

                    }
                    else{
                        JOptionPane.showMessageDialog(this, "Vous devez obtenir le Trésor :\n"+c.GetAnimal().toString(), "Catégorie : "+c.GetNom(), 1);
                    }
                }
            }
        }
        if(boutonTemp.getText().compareTo(regionEst.GetNom()) == 0){
            for(Categorie c: this.regionEst.categories){
                if(c.GetNom().compareTo(ListeCategories.getSelectedValue()) == 0){
                   if(gamer.HasTotem(cat.GetAnimal())){
                       JOptionPane.showMessageDialog(this, "Vous avez déjà le Trésor :\n"+c.GetAnimal().toString()+"!", "Catégorie : "+c.GetNom(), 1);

                    }
                    else{
                        JOptionPane.showMessageDialog(this, "Vous devez obtenir le Trésor :\n"+c.GetAnimal().toString(), "Catégorie : "+c.GetNom(), 1);
                    }
                } 
            }
        }
    }
    
    //Permet d'obtenir des informations sur le joueur
    public void AfficheEtatJeu(){
        //Récupération informations joueur
        ListeEtatJoueur.setListData(gamer.ToString());
        
        //Eléments rendus visibles
        ListeEtatJoueur.setVisible(true);
        LabelEtatJoueur.setVisible(true);
        ScrollEtatJoueur.setVisible(true);
    }
    
    //Permet de créer un joueur
    public void CreerJoueur(){
        Boolean ok = false; //Flag
        String nom = "";//Nom temporaire
        
        if (!jeuChargé) {
            while (!ok){
                //Récupération pesudo joueur
                nom = JOptionPane.showInputDialog(this, "Entrez un pseudo", "Création pseudo", 3);

                //Si le pseudo est valide, on sort de la boucle
                if (nom.compareTo("") != 0)
                {
                    ok = true;
                    
                }
                else
                {
                    JOptionPane.showMessageDialog(this,"Vous devez entrer un pseudo !", "Création pseudo", 0);
                }
            }
            ok = false; //On remet le flag à faux
            
            File fichier = new File(cheminDossierPseudo+nom+".ser");
            
            if(fichier.exists()){
                //On demande au joueur s'il souhaite récupérer son ancienne partie
                int res = JOptionPane.showConfirmDialog(this,"OK pour récupérer votre partie");
                if(res == JOptionPane.YES_OPTION){
                    gamer = Chargement(nom);
                }
                else{
                    JOptionPane.showMessageDialog(this, "Joueur " +nom+ ", aucune partie n'a été sauvegardée!", "Ancienne sauvegarde conservée!", 1);
                    JOptionPane.showMessageDialog(this,"Aucune partie récupérée.\nCréez un autre pseudo", "Aucune partie chargée", 1);
                    CreerJoueur();
                }
            }
            else{
                JOptionPane.showMessageDialog(this,"Bienvenue " +nom + "!\nVous pouvez désormais jouer !", "Pseudo créé !", 1);
                gamer.SetNom(nom);    //On donne un nom à l'objet Joueur créé

                SetBoutonsMenuInvisible();

                SetBoutonsRegionsVisibles();
                AfficheEtatJeu();//Affichage informations joueur
            }
        }
    }
    
    //Permet de sauvegarder une partie
    public void Sauvegarde(String nomFichier, Joueur j){
        
        //Si tout va bien
        try( //Création des objets pour la sérialisation
           FileOutputStream fichierSortie = new FileOutputStream(cheminDossierPseudo+nomFichier+".ser"); 
           ObjectOutputStream sortie = new ObjectOutputStream(fichierSortie)) {
           
           sortie.writeObject(j);//Objet sérialisé
           
           //Fermeture
           sortie.close();
           fichierSortie.close();
           
           //Message de sauvegarde réussie
           JOptionPane.showMessageDialog(this,"Joueur " + j.GetNom() + ", votre partie a été sauvegardée!", "Sauvegarde réussie!",1);
           
        }
        //Sinon erreur
        catch(IOException e){
            System.out.println(e.getMessage());
        }
    }
    
    //Permet de charger une partie
    public Joueur Chargement(String nomPseudo){
        
        //Création objet Joueur
        Joueur j = new Joueur();
        
        //Si tout va bien
        try( //Création des objets pour la sérialisation
           FileInputStream fichierEntree = new FileInputStream(cheminDossierPseudo+nomPseudo+".ser"); 
           ObjectInputStream entree = new ObjectInputStream(fichierEntree)) {
           
            try {
                j = (Joueur) entree.readObject();//Objet désérialisé
            }
            catch (ClassNotFoundException cnfe) {
                cnfe.printStackTrace();
            }
           
            //Fermeture
            entree.close();
            fichierEntree.close();
           
           //Message de chargement réussi
           JOptionPane.showMessageDialog(this,"Joueur " + j.GetNom() + ", votre partie est chargée!", "Chargement réussi!",1);
           BoutonNouveauJeu.setText("Reprendre partie");//Bouton change de nom
           jeuChargé = true;//On précise que la partie est chargée
        }
        catch(IOException e){
            e.getMessage();
            return null;
        }
        return j;
    }
    
    //Permet de mettre à la ligne un texte trop long pour le label
    public static String convertToMultiline(String s){
        return "<html>" + s.replaceAll("\n", "<br>");
    }
    
    //Rend invisible les boutons du menu
    public void SetBoutonsMenuInvisible(){
        BoutonNouveauJeu.setVisible(false);
        BoutonChargerPartie.setVisible(false);
    }
    
    //Rend visible les boutons du menu
    public void SetBoutonsMenuVisible(){
        BoutonChargerPartie.setVisible(true);
        BoutonNouveauJeu.setVisible(true);
    }
    
    //Rend invisible les éléments de catégorie
    public void SetBoutonsCategorieInvisible(){
       /* BoutonValiderCategorie.setVisible(false);
        ScrollCategorie.setVisible(false);
        ListeCategories.setVisible(false);
        LabelListeCategories.setVisible(false);*/
    }
    
    //Rend visible les éléments de catégorie
    public void SetBoutonsCategorieVisible(){
       /* BoutonValiderCategorie.setVisible(true);
        ScrollCategorie.setVisible(true);
        ListeCategories.setVisible(true);
        LabelListeCategories.setVisible(true);*/
    }
    
    //Reset quiz
    public void ResetQuiz(){
        //Remise à zéro
        QCM newquiz = new QCM();
        quiz = newquiz;
        i = 0;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BoutonChargerPartie;
    private javax.swing.JButton BoutonEst;
    private javax.swing.JButton BoutonIndice;
    private javax.swing.JButton BoutonNord;
    private javax.swing.JButton BoutonNouveauJeu;
    private javax.swing.JButton BoutonOuest;
    private javax.swing.JButton BoutonQuitter;
    private javax.swing.JButton BoutonRetourCategorie;
    private javax.swing.JButton BoutonRetourMenu;
    private javax.swing.JButton BoutonRevenirRegion;
    private javax.swing.JButton BoutonSauvegarder;
    private javax.swing.JButton BoutonSud;
    private javax.swing.JButton BoutonValiderCategorie;
    private javax.swing.JButton BoutonValiderQuestion;
    private javax.swing.JLabel LabelAidePanda;
    private javax.swing.JLabel LabelEtatJoueur;
    private javax.swing.JLabel LabelListeCategories;
    private javax.swing.JLabel LabelNomCategorie;
    private javax.swing.JLabel LabelNomRegion;
    private javax.swing.JLabel LabelNumQuestion;
    private javax.swing.JLabel LabelQuestion;
    private javax.swing.JLabel LabelReponse;
    private javax.swing.JLabel LabelResultatReponse;
    private javax.swing.JList<String> ListeCategories;
    private javax.swing.JList<String> ListeChoix;
    private javax.swing.JList<String> ListeEtatJoueur;
    private javax.swing.JScrollPane ScrollCategorie;
    private javax.swing.JScrollPane ScrollEtatJoueur;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
