/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package duian;

import java.awt.Button;
import java.awt.Color;
import java.awt.Insets;
import java.util.TimerTask;
import javax.swing.JButton;
import java.util.Vector;
import javax.swing.JOptionPane;
import java.util.Timer;

/**
 *
 * @author DydyBook
 */
public final class AppliDuiAn extends javax.swing.JFrame {
    
    
    //Variables globales
    int i = 0           ; //Indice global des tableaux du quiz
    String[] queries    ; //Tableau global des questions
    String[] answers    ; //Tablea global des réponses
    String[][] choices  ; //Tableau global des choix multiples
    String[] help       ; //Tableau global des messages d'aide pour les questions
    String path = "/Users/DydyBook/NetBeansProjects/DuiAn/DuiAn/src/duian/Regions/";//Chemin absolu d'accès aux fichiers, à modifier selon le chemin de l'utilisateur
    String[] regions = new String[4]; //Tableau global des régions
    JButton boutonTemp = new JButton(); //JButton récupérant les informations sur le bouton sur lequel le joueur à cliquer
    int passable = 3;               //Paramètre de fautes maximales pour chaque question
    Boolean DemarrerJeu;            //Précise si on est au début de la catégorie
    Boolean BoutonValiderCliqué;    //Précise si le bouton "Valider" a été cliqué 
    Boolean BoutonQuestionSuivanteCliqué; //Précise si le bouton "Question suivante" a été cliqué 
    String cheminDossierPseudo = "/Users/DydyBook/NetBeansProjects/DuiAn/DuiAn/src/duian/comptes/";//Chemin dossier comptes
    Boolean jeuChargé = false; //Permet de savoir si le jeu a été chargé

    
    //Création objets
    Carte map = new Carte();
    Joueur gamer = new Joueur();
    Region regionNord = new Region();
    Region regionSud = new Region();
    Region regionOuest = new Region();
    Region regionEst = new Region();
    Region regionTemp = new Region();
    Categorie cat = new Categorie();
    QCM quiz = new QCM();
    
    
    /**
     * Creates new form AppliDuiAn
     */
    public AppliDuiAn() {
        initComponents();
        
        LabelNomRegion.setText("Bienvenue dans le jeu Dui'An!");//Titre de menu
        
        SetInvisibleHorsQuiz();//Eléments à rendre invisible hors quiz
        
        regions = map.GetRegions();//Récupération des régions
        
        //Assignation valeurs aux régions
        regionNord.SetNom(regions[0]);
        regionSud.SetNom(regions[1]);
        regionEst.SetNom(regions[2]);
        regionOuest.SetNom(regions[3]);
        
        //Assignation des catégories par région
        regionNord.AjoutCategories(map.GetRegionSpec(regions[0]));
        regionSud.AjoutCategories(map.GetRegionSpec(regions[1]));
        regionEst.AjoutCategories(map.GetRegionSpec(regions[2]));
        regionOuest.AjoutCategories(map.GetRegionSpec(regions[3]));
        
        //Assignation des totems à chaque catégorie
        
        //Assignation par catégorie
        regionNord.SetTotemsParCategorie("Tortue");
        regionSud.SetTotemsParCategorie("Phénix");
        regionEst.SetTotemsParCategorie("Dragon");
        regionOuest.SetTotemsParCategorie("Tigre");
        
        SetBoutonsRegionsInvisibles();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel7 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        LabelNomCategorie = new javax.swing.JLabel();
        BoutonValider = new javax.swing.JButton();
        PanelAide = new javax.swing.JPanel();
        LabelAidePanda = new javax.swing.JLabel();
        PanelQuestion = new javax.swing.JPanel();
        LabelQuestion = new javax.swing.JLabel();
        ListeChoix = new javax.swing.JList<>();
        BoutonSauvegarder = new javax.swing.JButton();
        PanelReponse = new javax.swing.JPanel();
        LabelReponse = new javax.swing.JLabel();
        LabelResultatReponse = new javax.swing.JLabel();
        BoutonIndice = new javax.swing.JButton();
        LabelNomRegion = new javax.swing.JLabel();
        BoutonNord = new javax.swing.JButton();
        BoutonOuest = new javax.swing.JButton();
        BoutonSud = new javax.swing.JButton();
        BoutonEst = new javax.swing.JButton();
        BoutonValiderCategorie = new javax.swing.JButton();
        BoutonRevenirRegion = new javax.swing.JButton();
        BoutonQuitter = new javax.swing.JButton();
        LabelListeCategories = new javax.swing.JLabel();
        BoutonNouveauJeu = new javax.swing.JButton();
        BoutonChargerPartie = new javax.swing.JButton();
        ScrollCategorie = new javax.swing.JScrollPane();
        ListeCategories = new javax.swing.JList<>();
        ScrollEtatJoueur = new javax.swing.JScrollPane();
        ListeEtatJoueur = new javax.swing.JList<>();
        LabelEtatJoueur = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 102));

        jPanel7.setBackground(new java.awt.Color(255, 255, 102));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 153));

        jPanel1.setBackground(new java.awt.Color(153, 255, 51));

        LabelNomCategorie.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        LabelNomCategorie.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNomCategorie.setText("Catégorie");
        LabelNomCategorie.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        BoutonValider.setText("Valider");
        BoutonValider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonValiderActionPerformed(evt);
            }
        });

        PanelAide.setBackground(new java.awt.Color(255, 204, 204));

        LabelAidePanda.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        LabelAidePanda.setAutoscrolls(true);
        LabelAidePanda.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout PanelAideLayout = new javax.swing.GroupLayout(PanelAide);
        PanelAide.setLayout(PanelAideLayout);
        PanelAideLayout.setHorizontalGroup(
            PanelAideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(LabelAidePanda, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
        );
        PanelAideLayout.setVerticalGroup(
            PanelAideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelAideLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(LabelAidePanda, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        PanelQuestion.setBackground(new java.awt.Color(255, 153, 102));

        LabelQuestion.setBackground(new java.awt.Color(255, 153, 153));
        LabelQuestion.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        LabelQuestion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelQuestion.setAutoscrolls(true);

        javax.swing.GroupLayout PanelQuestionLayout = new javax.swing.GroupLayout(PanelQuestion);
        PanelQuestion.setLayout(PanelQuestionLayout);
        PanelQuestionLayout.setHorizontalGroup(
            PanelQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelQuestionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelQuestion, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanelQuestionLayout.setVerticalGroup(
            PanelQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelQuestionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelQuestion, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                .addContainerGap())
        );

        BoutonSauvegarder.setText("Sauvegarder");

        PanelReponse.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        LabelReponse.setBackground(new java.awt.Color(0, 255, 204));
        LabelReponse.setFont(new java.awt.Font("Lucida Grande", 3, 13)); // NOI18N
        LabelReponse.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelReponse.setText("Réponse");

        LabelResultatReponse.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        LabelResultatReponse.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout PanelReponseLayout = new javax.swing.GroupLayout(PanelReponse);
        PanelReponse.setLayout(PanelReponseLayout);
        PanelReponseLayout.setHorizontalGroup(
            PanelReponseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelReponseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelReponseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelResultatReponse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LabelReponse, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))
                .addContainerGap())
        );
        PanelReponseLayout.setVerticalGroup(
            PanelReponseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelReponseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelResultatReponse, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LabelReponse, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        BoutonIndice.setText("Un indice ?");
        BoutonIndice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonIndiceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(LabelNomCategorie, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(BoutonSauvegarder))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ListeChoix, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(BoutonValider))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(PanelAide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addComponent(BoutonIndice, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(PanelQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(PanelReponse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(1, 1, 1))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LabelNomCategorie, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BoutonSauvegarder))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PanelQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PanelReponse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BoutonIndice)
                            .addComponent(ListeChoix, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BoutonValider)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(PanelAide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        jTabbedPane1.addTab("Quiz", jPanel1);

        LabelNomRegion.setFont(new java.awt.Font("Lucida Grande", 1, 20)); // NOI18N
        LabelNomRegion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNomRegion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(153, 153, 153)));

        BoutonNord.setActionCommand("Langue");
        BoutonNord.setLabel("Langue");
        BoutonNord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonNordActionPerformed(evt);
            }
        });

        BoutonOuest.setLabel("Culture pop moderne");
        BoutonOuest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonOuestActionPerformed(evt);
            }
        });

        BoutonSud.setText("Histoire et Géographie");
        BoutonSud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonSudActionPerformed(evt);
            }
        });

        BoutonEst.setText("Us et Coutumes");
        BoutonEst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonEstActionPerformed(evt);
            }
        });

        BoutonValiderCategorie.setText("Valider");
        BoutonValiderCategorie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonValiderCategorieActionPerformed(evt);
            }
        });

        BoutonRevenirRegion.setText("Revenir au menu");
        BoutonRevenirRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonRevenirRegionActionPerformed(evt);
            }
        });

        BoutonQuitter.setText("Quitter");
        BoutonQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonQuitterActionPerformed(evt);
            }
        });

        LabelListeCategories.setBackground(new java.awt.Color(153, 153, 255));
        LabelListeCategories.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        LabelListeCategories.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelListeCategories.setText("Catégories dédiées");

        BoutonNouveauJeu.setText("Nouveau jeu");
        BoutonNouveauJeu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonNouveauJeuActionPerformed(evt);
            }
        });

        BoutonChargerPartie.setText("Charger une partie");

        ListeCategories.setBackground(new java.awt.Color(204, 204, 255));
        ScrollCategorie.setViewportView(ListeCategories);

        ScrollEtatJoueur.setViewportView(ListeEtatJoueur);

        LabelEtatJoueur.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        LabelEtatJoueur.setText("Joueur");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(BoutonRevenirRegion)
                        .addGap(84, 84, 84)
                        .addComponent(LabelNomRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BoutonQuitter))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(96, 96, 96)
                                .addComponent(BoutonNord)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BoutonSud)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BoutonEst)
                                .addGap(28, 28, 28)
                                .addComponent(BoutonOuest))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addGap(38, 38, 38)
                                        .addComponent(BoutonValiderCategorie))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addComponent(LabelListeCategories, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(LabelEtatJoueur))
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addComponent(ScrollCategorie, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(ScrollEtatJoueur, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addComponent(BoutonNouveauJeu)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(BoutonChargerPartie)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 668, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 2, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(LabelNomRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BoutonRevenirRegion)
                            .addComponent(BoutonQuitter))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BoutonNord)
                    .addComponent(BoutonSud)
                    .addComponent(BoutonEst)
                    .addComponent(BoutonOuest))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LabelListeCategories)
                            .addComponent(LabelEtatJoueur))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ScrollCategorie, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ScrollEtatJoueur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BoutonValiderCategorie)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BoutonNouveauJeu)
                            .addComponent(BoutonChargerPartie))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jTabbedPane1)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Permet de revenir au menu des régions
    private void BoutonRevenirRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonRevenirRegionActionPerformed
        SetInvisibleHorsQuiz();//Eléménts rendus invisibles

        SetBoutonsRegionsVisibles();
    }//GEN-LAST:event_BoutonRevenirRegionActionPerformed

    //Permet de rentrer dans les catégories de la région Us & Coutumes
    private void BoutonEstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonEstActionPerformed
        SetVisibleQuiz();//Affichage des éléments nécessaires au quiz

        SetBoutonsRegionsInvisibles();

        //Récupération informations par région
        LabelNomRegion.setText(BoutonEst.getText());
        ListeCategories.setListData(map.GetRegionSpec(BoutonEst.getText()));
        LabelListeCategories.setText("Trésors : Dragons");
        ListeCategories.setVisible(true);
        
        //On récupère le bouton cliqué
        boutonTemp = BoutonEst;
        
    }//GEN-LAST:event_BoutonEstActionPerformed

    //Permet de rentrer dans les catégories de la région Histoire & Géographie
    private void BoutonSudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonSudActionPerformed
        SetVisibleQuiz();//Affichage des éléments nécessaires au quiz
        
        SetBoutonsRegionsInvisibles();

        //Récupération informations par région
        LabelNomRegion.setText(regionSud.GetNom());
        ListeCategories.setListData(map.GetRegionSpec(BoutonSud.getText()));
        LabelListeCategories.setText("Trésors : Phénix");
        ListeCategories.setVisible(true);
       
        //On récupère le bouton cliqué
        boutonTemp = BoutonSud;
        
    }//GEN-LAST:event_BoutonSudActionPerformed

    //Permet de rentrer dans les catégories de la région Culture pop moderne
    private void BoutonOuestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonOuestActionPerformed
        SetVisibleQuiz();//Affichage des éléments nécessaires au quiz

        SetBoutonsRegionsInvisibles();

        //Récupération informations par région
        LabelNomRegion.setText(BoutonOuest.getText());
        ListeCategories.setListData(map.GetRegionSpec(BoutonOuest.getText()));
        LabelListeCategories.setText("Trésors : Tigres");
        ListeCategories.setVisible(true);
        
        //On récupère le bouton cliqué
        boutonTemp = BoutonOuest;
        
    }//GEN-LAST:event_BoutonOuestActionPerformed

    //Permet de rentrer dans les catégories de la région Langue
    private void BoutonNordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonNordActionPerformed
        SetVisibleQuiz();//Affichage des éléments nécessaires au quiz

        SetBoutonsRegionsInvisibles(); 

        //Récupération informations par région
        LabelNomRegion.setText(BoutonNord.getText());
        ListeCategories.setListData(map.GetRegionSpec(BoutonNord.getText()));
        LabelListeCategories.setText("Trésors : Tortues");
        ListeCategories.setVisible(true);
        
        //On récupère le bouton cliqué
        boutonTemp = BoutonNord;
     
    }//GEN-LAST:event_BoutonNordActionPerformed

    //Permet d'afficher une case contenant un indice pour la question du quiz
    private void BoutonIndiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonIndiceActionPerformed
        
        //Eléments rendus visibles
        PanelAide.setVisible(!PanelAide.isVisible());
        LabelAidePanda.setVisible(!LabelAidePanda.isVisible());
    }//GEN-LAST:event_BoutonIndiceActionPerformed

    //Permet de valider la catégorie une fois dans une région
    private void BoutonValiderCategorieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonValiderCategorieActionPerformed
        
        AffichageSelonRegion();//Affichage des messages selon la région
        
        //DemarrerJeu = true; //On précise que le quiz de la catégorie commence
        i = 0 ; //On réinitialise i à chaque retour à la catégorie
       
        GetQuiz();//Obtenir le quizz
        
        //Afficher le totem à obtenir
        LabelListeCategories.setText(cat.GetAnimal().toString());
        
        //Eléments rendus invisibles
        ScrollCategorie.setVisible(false);
        ListeCategories.setVisible(false);
        BoutonValiderCategorie.setVisible(false);
        PanelReponse.setVisible(false);
        LabelResultatReponse.setVisible(false);
        LabelReponse.setVisible(false);
        
        //Eléments rendus visibles
        SetVisibleQuiz();
        
    }//GEN-LAST:event_BoutonValiderCategorieActionPerformed

    //Permet de quitter l'application
    private void BoutonQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonQuitterActionPerformed
        System.exit(0);
    }//GEN-LAST:event_BoutonQuitterActionPerformed

    private void BoutonValiderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonValiderActionPerformed
        AfficheResultat();//Affiche le résultat
    }//GEN-LAST:event_BoutonValiderActionPerformed

    private void BoutonNouveauJeuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonNouveauJeuActionPerformed
        
        CreerJoueur();//Création joueur
    }//GEN-LAST:event_BoutonNouveauJeuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppliDuiAn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppliDuiAn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppliDuiAn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppliDuiAn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new AppliDuiAn().setVisible(true);
            }
        });
    }
    
    //Permet de créer des boutons de choix
    public void CreerItemChoix(){
        ListeChoix.setListData(choices[i]);
    }
    
    //Permet de récupérer le quiz correspondant à la catégorie
    public void GetQuiz(){
        
        BoutonValider.setText("Valider");//On demande de cliquer sur la question suivante
        
        //Eléments rendus ponctuellement invisibles
        LabelReponse.setVisible(false);
        LabelResultatReponse.setVisible(false);
        PanelReponse.setVisible(false);
            
        //Tant qu'il y a encore des questions
        if(i < 5){
            //On récupère la catégorie sélectionnée selon la région
           if(boutonTemp.getText().compareTo(regionNord.GetNom()) == 0){
                for(Categorie c: regionNord.categories){
                    //Si la catégorie sélectionnée correspond au nom d'une catégorie de la région
                    if(ListeCategories.getSelectedValue().compareTo(c.GetNom()) == 0){
                        cat = c;
                        regionTemp = regionNord;
                    }
                }
            }
            else if(boutonTemp.getText().compareTo(regionSud.GetNom()) == 0){
                for(Categorie c: regionSud.categories){
                    //Si la catégorie sélectionnée correspond au nom d'une catégorie de la région
                    if(ListeCategories.getSelectedValue().compareTo(c.GetNom()) == 0){
                        cat = c;
                        regionTemp = regionSud;
                    }
                }
            }
            else if(boutonTemp.getText().compareTo(regionOuest.GetNom()) == 0){
                for(Categorie c: regionOuest.categories){
                    //Si la catégorie sélectionnée correspond au nom d'une catégorie de la région
                    if(ListeCategories.getSelectedValue().compareTo(c.GetNom()) == 0){
                        cat = c;
                        regionTemp = regionOuest;
                    }
                }
            }
            else if(boutonTemp.getText().compareTo(regionEst.GetNom()) == 0){
                for(Categorie c: regionEst.categories){
                    //Si la catégorie sélectionnée correspond au nom d'une catégorie de la région
                    if(ListeCategories.getSelectedValue().compareTo(c.GetNom()) == 0){
                        cat = c;
                        regionTemp = regionEst;
                    }
                }
            }
            cat.SetNom(ListeCategories.getSelectedValue());
            cat.SetPath(path+boutonTemp.getText()+"/"+cat.GetNom());
            quiz.SetQCM(cat.GetPath());

            //Récupération des éléments du quiz
            queries = quiz.GetQuestions();
            answers = quiz.GetReponses();
            choices = quiz.GetChoix();
            help = quiz.GetAides();

            //Affichage des informations
            LabelNomCategorie.setText(cat.GetNom());
            LabelQuestion.setText(queries[i]);
            LabelReponse.setText(answers[i]);
            LabelAidePanda.setText(help[i]);
            CreerItemChoix();
            
            //Eléments rendus invisibles
            LabelAidePanda.setVisible(false);
            PanelAide.setVisible(false);
        }
        //S'il n'y a plus de questions dans la catégorie
        else{
            AfficheEtatJeu(); //Affiche les informations actualisées sur le joueur
            
            SetInvisibleHorsQuiz(); //On n'affiche plus le quiz
            
            SetVisibleHorsQuizFInJeu(); //On affiche les catégories de la région
            
            //Si le nombre d'erreurs est passable voire bas
            if (quiz.GetBonnesReponses() >= passable){
                JOptionPane.showMessageDialog(this,"Vous avez eu " +quiz.GetBonnesReponses()+ "bonne(s) réponse(s)", "Fini", 1);
                JOptionPane.showMessageDialog(this,"Vous avez obtenu le " +cat.GetAnimal().toString()+ " !", "Super !", 1);
                BoutonSauvegarder.setVisible(true); //On ne sauvegarde la partie que si on a réussi à valider la catégorie
                LabelNomCategorie.setText("Bravo !" +cat.GetAnimal().toString()+" obtenu");
                
                cat.SetValide(true);
                gamer.SetTotemsValidés(gamer.GetTotemsValidés()+1);
                gamer.AjoutTotem(cat.GetAnimal());
                
                //On récupère la catégorie sélectionnée selon la région
                if(boutonTemp.getText().compareTo(regionNord.GetNom()) == 0){
                    for(Categorie c: regionNord.categories){
                        //Si la catégorie sélectionnée correspond au nom d'une catégorie de la région
                        if(cat.GetNom().compareTo(c.GetNom()) == 0){
                            c = cat;
                        }
                    }
                }
                else if(boutonTemp.getText().compareTo(regionSud.GetNom()) == 0){
                    for(Categorie c: regionSud.categories){
                        //Si la catégorie sélectionnée correspond au nom d'une catégorie de la région
                        if(cat.GetNom().compareTo(c.GetNom()) == 0){
                            c = cat;
                        }
                    }
                }
                else if(boutonTemp.getText().compareTo(regionOuest.GetNom()) == 0){
                    for(Categorie c: regionOuest.categories){
                        //Si la catégorie sélectionnée correspond au nom d'une catégorie de la région
                        if(cat.GetNom().compareTo(c.GetNom()) == 0){
                            c = cat;
                        }
                    }
                }
                else if(boutonTemp.getText().compareTo(regionEst.GetNom()) == 0){
                    for(Categorie c: regionEst.categories){
                        //Si la catégorie sélectionnée correspond au nom d'une catégorie de la région
                        if(cat.GetNom().compareTo(c.GetNom()) == 0){
                            c = cat;
                        }
                    }
                }
            }
            else{//Sinon le joueur a perdu
                JOptionPane.showMessageDialog(this,"Désolé ! Vous n'avez eu que " +quiz.GetBonnesReponses()+ " bonne(s) réponse(s)", "Oups...", 0); //Affichage nombre d'erreurs
                
                CategoriePerdue();
            }
            AfficheEtatJeu();
        }
    }
    
    //Permet de rendre invisible certains éléments au menu
    public void SetInvisibleHorsQuiz(){
        PanelAide.setVisible(false);
        LabelAidePanda.setVisible(false);
        BoutonIndice.setVisible(false);
        jTabbedPane1.setVisible(false);
        ListeCategories.setVisible(false);
        LabelListeCategories.setVisible(false);
        LabelNomCategorie.setVisible(false);
        LabelReponse.setVisible(false);
        PanelReponse.setVisible(false);
        BoutonRevenirRegion.setVisible(false);
        BoutonValiderCategorie.setVisible(false);
        PanelReponse.setVisible(false);
        LabelQuestion.setVisible(false);
        PanelQuestion.setVisible(false);
        LabelResultatReponse.setVisible(false);
        ScrollCategorie.setVisible(false);
        ListeEtatJoueur.setVisible(false);
        LabelEtatJoueur.setVisible(false);
        ScrollEtatJoueur.setVisible(false);
        BoutonSauvegarder.setVisible(false);
    }
    
    //Permet de rendre visible certains éléments au quiz
    public void SetVisibleQuiz(){
        BoutonIndice.setVisible(true);
        jTabbedPane1.setVisible(true);
        ListeCategories.setVisible(true);
        LabelListeCategories.setVisible(true);
        LabelNomCategorie.setVisible(true);
        BoutonRevenirRegion.setVisible(true);
        BoutonValiderCategorie.setVisible(true);
        LabelQuestion.setVisible(true);
        PanelQuestion.setVisible(true);
        ScrollCategorie.setVisible(true);
    }
    
    //Permet de rendre visible certains éléments hors quiz fin jeu
    public void SetVisibleHorsQuizFInJeu(){
        ListeCategories.setVisible(true);
        LabelListeCategories.setVisible(true);
        LabelNomCategorie.setVisible(true);
        BoutonRevenirRegion.setVisible(true);
        BoutonValiderCategorie.setVisible(true);
        ScrollCategorie.setVisible(true);
    }
    
    //Permet de rendre invisible les boutons des régions
    public void SetBoutonsRegionsInvisibles(){
        BoutonNord.setVisible(false);
        BoutonSud.setVisible(false);
        BoutonOuest.setVisible(false);
        BoutonEst.setVisible(false);
    }
    
    //Permet de rendre visible les boutons des régions
    public void SetBoutonsRegionsVisibles(){
        BoutonNord.setVisible(true);
        BoutonSud.setVisible(true);
        BoutonOuest.setVisible(true);
        BoutonEst.setVisible(true);
        
        LabelNomRegion.setText("Les régions de Chine");//Titre des régions
    }
    
    //Permet d'afficher le résultat
    public void AfficheResultat(){
        //Variables locales
        String repJoueur = ListeChoix.getSelectedValue();
        Timer timer = new Timer();
        
        //Création d'une tâche pour le timer
        TimerTask tache = new TimerTask() {
            @Override
            public void run() {
                if(i<5){//Le bouton Valider change de nom
                    BoutonValider.setText("Question suivante");//On demande de cliquer sur la question suivante
                }
                //Eléments rendus ponctuellement invisibles
                LabelReponse.setVisible(false);
                LabelResultatReponse.setVisible(false);
                PanelReponse.setVisible(false);
            }
        };
        
        
        //Si l'indice est inférieur au nombre d'éléments dans les tableaux de quiz
        if (i < 5){
            //Si on veut passer à la question suivante
            if(BoutonValider.getText().compareTo("Question suivante") == 0){
                if(BoutonValiderCliqué){  
                    i++;
                    GetQuiz();//On affiche la question suivante
                    BoutonValiderCliqué = false;//On remet le boutonValider à non cliqué
                }
            }
            //Sinon
            else{
                BoutonValiderCliqué = true;//On précise le bouton valider a été cliqué
                
                //Vérification du résultat
                if (repJoueur.compareTo(LabelReponse.getText()) == 0)
                {
                    LabelResultatReponse.setForeground(Color.BLUE);
                    LabelResultatReponse.setText("Correct !");
                    quiz.SetBonnesreponses();
                }
                else
                {
                    LabelResultatReponse.setForeground(Color.red);
                    LabelResultatReponse.setText("Faux !");
                }
                //Affichage de la réponse
                LabelReponse.setVisible(true);
                LabelResultatReponse.setVisible(true);
                PanelReponse.setVisible(true);

                timer.schedule(tache, 1*1000);//Enclenchement du rendu invisible de certains éléments
            }
        }
    }
    
    //Permet d'afficher des informations selon la région
    public void AffichageSelonRegion(){
        if(boutonTemp.getText().compareTo(regionNord.GetNom()) == 0){
            for(Categorie c: this.regionNord.categories){
                if(c.GetNom().compareTo(ListeCategories.getSelectedValue()) == 0){
                    
                    JOptionPane.showMessageDialog(this, "Vous devez obtenir le "+c.GetAnimal().toString(), "Catégorie : "+c.GetNom(), 1);
                     
                } 
            }
        }
        if(boutonTemp.getText().compareTo(regionSud.GetNom()) == 0){
            for(Categorie c: this.regionSud.categories){
                if(c.GetNom().compareTo(ListeCategories.getSelectedValue()) == 0){
                    JOptionPane.showMessageDialog(this, "Vous devez obtenir le "+c.GetAnimal().toString(), "Catégorie : "+c.GetNom(), 1);
                    
                    
                } 
            }
        }
        if(boutonTemp.getText().compareTo(regionOuest.GetNom()) == 0){
            for(Categorie c: this.regionOuest.categories){
                if(c.GetNom().compareTo(ListeCategories.getSelectedValue()) == 0){
                    JOptionPane.showMessageDialog(this, "Vous devez obtenir le "+c.GetAnimal().toString(), "Catégorie : "+c.GetNom(), 1);
                    
                    
                } 
            }
        }
        if(boutonTemp.getText().compareTo(regionEst.GetNom()) == 0){
            for(Categorie c: this.regionEst.categories){
                if(c.GetNom().compareTo(ListeCategories.getSelectedValue()) == 0){
                    JOptionPane.showMessageDialog(this, "Vous devez obtenir le "+c.GetAnimal().toString(), "Catégorie : "+c.GetNom(), 1);
                    
                    
                } 
            }
        }
    }
    
    //Permet d'obtenir des informations sur le joueur
    public void AfficheEtatJeu(){
        //Récupération informations joueur
        ListeEtatJoueur.setListData(gamer.ToString());
        
        //Eléments rendus visibles
        ListeEtatJoueur.setVisible(true);
        LabelEtatJoueur.setVisible(true);
        ScrollEtatJoueur.setVisible(true);
    }
    
    //Permet de gérer lorsque le joueur a perdu
    public void CategoriePerdue(){
        
    }
    
    //Permet de créer un joueur
    public void CreerJoueur(){
        Boolean ok = false; //Flag
        
        if (!jeuChargé) {
            while (!ok){
                //Récupération pesudo joueur
                String nom = JOptionPane.showInputDialog(this, "Entrez un pseudo", "Création pseudo", 3);

                //Si le pseudo est valide, on sort de la boucle
                if (nom.compareTo("") != 0)
                {
                    ok = true;
                    JOptionPane.showMessageDialog(this,"Bienvenue " +nom + "!\nVous pouvez désormais jouer !", "Pseudo créé !", 1);
                    gamer.SetNom(nom);    //On donne un nom à l'objet Joueur créé
                    
                    //Eléments rendus invisibles
                    BoutonNouveauJeu.setVisible(false);
                    BoutonChargerPartie.setVisible(false);
                    
                    SetBoutonsRegionsVisibles();
                    AfficheEtatJeu();//Affichage informations joueur
                }
                else
                {
                    JOptionPane.showMessageDialog(this,"Vous devez entrer un pseudo !", "Création pseudo", 0);
                }
            }
            ok = false; //On remet le flag à faux
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BoutonChargerPartie;
    private javax.swing.JButton BoutonEst;
    private javax.swing.JButton BoutonIndice;
    private javax.swing.JButton BoutonNord;
    private javax.swing.JButton BoutonNouveauJeu;
    private javax.swing.JButton BoutonOuest;
    private javax.swing.JButton BoutonQuitter;
    private javax.swing.JButton BoutonRevenirRegion;
    private javax.swing.JButton BoutonSauvegarder;
    private javax.swing.JButton BoutonSud;
    private javax.swing.JButton BoutonValider;
    private javax.swing.JButton BoutonValiderCategorie;
    private javax.swing.JLabel LabelAidePanda;
    private javax.swing.JLabel LabelEtatJoueur;
    private javax.swing.JLabel LabelListeCategories;
    private javax.swing.JLabel LabelNomCategorie;
    private javax.swing.JLabel LabelNomRegion;
    private javax.swing.JLabel LabelQuestion;
    private javax.swing.JLabel LabelReponse;
    private javax.swing.JLabel LabelResultatReponse;
    private javax.swing.JList<String> ListeCategories;
    private javax.swing.JList<String> ListeChoix;
    private javax.swing.JList<String> ListeEtatJoueur;
    private javax.swing.JPanel PanelAide;
    private javax.swing.JPanel PanelQuestion;
    private javax.swing.JPanel PanelReponse;
    private javax.swing.JScrollPane ScrollCategorie;
    private javax.swing.JScrollPane ScrollEtatJoueur;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
